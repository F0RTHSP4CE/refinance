{% extends "base.jinja2" %}
{% from "transaction/macro_list.jinja2" import transaction_list with context %}
{% from 'widgets/tag_inline.jinja2' import tag_inline %}
{% from 'widgets/pagination.jinja2' import pagination_control %}

{% block title %}Entity {{ entity.name }}{% endblock %}

{% block content %}
<style>
    .top-section {
        display: flex;
        gap: 20px;
        flex-wrap: wrap;
    }

    .details-balance {
        flex: 0 0 auto;
        min-width: 300px;
    }

    .stats {
        flex: 1 1 0;
    }

    @media (max-width: 1200px) {
        .top-section {
            flex-direction: column;
        }
    }

    .charts-grid {
        display: flex;
        flex-wrap: wrap;
        gap: 20px;
    }

    .chart-cell {
        flex: 1 1 calc(50% - 20px);
        min-width: 280px;
        display: flex;
        flex-direction: column;
        gap: 12px;
        padding: 16px;
        border-radius: 12px;
        background: linear-gradient(135deg, rgba(248, 250, 252, 0.9), rgba(241, 245, 249, 0.9));
        border: 1px solid rgba(226, 232, 240, 0.8);
        box-sizing: border-box;
    }

    .chart-cell h2 {
        margin: 0;
        color: #1e293b;
        font-size: 1.05rem;
        letter-spacing: 0.01em;
    }

    .chart-cell canvas {
        width: 100% !important;
        height: auto !important;
    }

    .pie-pair {
        display: flex;
        flex-wrap: wrap;
        gap: 16px;
        justify-content: space-around;
    }

    .pie-chart {
        flex: 1 1 calc(50% - 16px);
        min-width: 160px;
        max-width: 220px;
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 8px;
    }

    .pie-chart h3 {
        font-size: 0.95rem;
        font-weight: 600;
        color: #334155;
        margin: 0;
        text-align: center;
    }

    .pie-chart canvas {
        width: 100% !important;
        max-width: 220px;
    }

    @media (max-width: 900px) {
        .chart-cell {
            flex: 1 1 100%;
            min-width: 0;
        }

        .pie-pair {
            justify-content: center;
        }
    }

    @media (max-width: 600px) {
        .pie-chart {
            flex: 1 1 100%;
            max-width: 260px;
        }
    }

    .stats-controls {
        display: flex;
        flex-wrap: wrap;
        gap: 8px;
        align-items: center;
        margin-bottom: 1rem;
        font-size: 0.9rem;
    }

    .stats-controls span {
        color: #475569;
    }

    .stats-controls a {
        padding: 4px 10px;
        border-radius: 6px;
        background: #e2e8f0;
        color: inherit;
        text-decoration: none;
        transition: background 0.2s ease;
    }

    .stats-controls a:hover {
        background: #cbd5f5;
    }

    .stats-controls a.active {
        background: #2563eb;
        color: #fff;
    }

    .stats-controls .divider {
        color: #94a3b8;
        margin: 0 4px;
    }

    .chart-placeholder {
        color: #6b7280;
        font-style: italic;
        margin: 1rem 0;
    }
</style>
<div class="top-section">
    <div class="details-balance">
        <h2>Details</h2>
        <p>
        <table>
            <tr>
                <td>ID</td>
                <td>{{ entity.id }}</td>
            </tr>
            <tr>
                <td>Name</td>
                <td>{{entity.name}}</td>
            </tr>
            <tr>
                <td>Comment</td>
                <td>{{ entity.comment or "" }}</td>
            </tr>
            <tr>
                <td>Tags</td>
                <td>
                    {% for tag in entity.tags %}
                    {{ tag_inline(tag) }}
                    {% endfor %}
                </td>
            </tr>
            <tr>
                <td>Active</td>
                <td>{{ entity.active }}</td>
            </tr>
            <tr>
                <td>Created at</td>
                <td>{{ human_readable_date(entity.created_at) | safe }}</td>
            </tr>
            <tr>
                <td>Modified at</td>
                <td>{{ human_readable_date(entity.modified_at) | safe if entity.modified_at else "" }}</td>
            </tr>
            <tr>
                <td>Authentication</td>
                <td>
                    {% if entity.auth %}
                    <table>
                        <thead>
                            <tr>
                                <th>Provider</th>
                                <th>Value</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% set labels = {
                            "telegram_id": "Telegram ID",
                            "signal_id": "Signal ID",
                            "whatsapp_number": "WhatsApp Number",
                            "email": "Email"
                            } %}
                            {% for key, value in entity.auth.items() %}
                            <tr>
                                <td>{{ labels.get(key, key.replace('_', ' ').title()) }}</td>
                                <td>{{ value or " "}}</td>
                            </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                    {% else %}
                    -
                    {% endif %}
                </td>
            </tr>
            <tr>
                <td>Cards</td>
                <td>
                    {% if cards and cards|length > 0 %}
                    <table>
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Comment</th>
                                <th>Created at</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for c in cards %}
                            <tr>
                                <td>#{{ c.id }}</td>
                                <td>{{ c.comment or 'â€”' }}</td>
                                <td>{{ human_readable_date(c.created_at) | safe }}</td>
                            </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                    {% else %}
                    -
                    {% endif %}
                </td>
            </tr>
        </table>
        </p>

        <p><a href="{{ url_for('entity.edit', id=entity.id) }}">Edit</a></p>

        <h2>Balance</h2>

        {% if not balance.draft and not balance.completed %}
        <p>No transactions.</p>
        {% endif %}

        {% if balance.completed %}
        <p>
            Completed:
        <table>
            {% for currency,amount in balance.completed.items() %}
            <tr>
                <td class="right-align {% if amount|float < 0 %}amount-negative{% endif %}">
                    {{ amount}}
                </td>
                <td>{{ currency | upper }}</td>
            </tr>
            {% endfor %}
        </table>
        </p>
        {% endif %}

        {% if balance.draft %}
        <p>
            Draft (<a href="{{ url_for('transaction.list', entity_id=entity.id, status='draft') }}">Find</a>):
        <table>
            {% for currency,amount in balance.draft.items() %}
            <tr>
                <td class="right-align {% if amount|float < 0 %}amount-negative{% endif %}">
                    {{ amount}}
                </td>
                <td>{{ currency | upper }}</td>
            </tr>
            {% endfor %}
        </table>
        </p>
        {% endif %}
    </div>
    <div class="stats">
        <h2>Statistics</h2>
        <!-- Entity stats charts -->
        <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns"></script>
        <div class="stats-controls">
            <span>Timeframe:</span>
            {% for months_option in [3, 6, 12] %}
            <a href="{{ update_query_params(stats_months=months_option) }}"
                class="{% if stats_months == months_option %}active{% endif %}">{{ months_option }}m</a>
            {% endfor %}
            <span class="divider">|</span>
            <span>Top entries:</span>
            {% for limit_option in [5, 8, 12] %}
            <a href="{{ update_query_params(stats_limit=limit_option) }}"
                class="{% if stats_limit == limit_option %}active{% endif %}">{{ limit_option }}</a>
            {% endfor %}
        </div>
        <div class="charts-grid">
            <div class="chart-cell">
                <h2>Balance Change by Day</h2>
                <canvas id="balance-change-chart"></canvas>
            </div>
            <div class="chart-cell">
                <h2>Transactions by Day</h2>
                <canvas id="transactions-day-chart"></canvas>
            </div>
            <div class="chart-cell">
                <h2>Incoming Activity (last {{ stats_months }} months)</h2>
                <div class="pie-pair">
                    <div class="pie-chart">
                        <h3>Top Income Sources</h3>
                        {% if top_incoming %}
                        <canvas id="top-incoming-chart"></canvas>
                        {% else %}
                        <p class="chart-placeholder">No incoming transactions in the selected timeframe.</p>
                        {% endif %}
                    </div>
                    <div class="pie-chart">
                        <h3>Top Incoming Tags</h3>
                        {% if top_incoming_tags %}
                        <canvas id="top-incoming-tags-chart"></canvas>
                        {% else %}
                        <p class="chart-placeholder">No tagged incoming activity in the selected timeframe.</p>
                        {% endif %}
                    </div>
                </div>
            </div>
            <div class="chart-cell">
                <h2>Outgoing Activity (last {{ stats_months }} months)</h2>
                <div class="pie-pair">
                    <div class="pie-chart">
                        <h3>Top Expense Destinations</h3>
                        {% if top_outgoing %}
                        <canvas id="top-outgoing-chart"></canvas>
                        {% else %}
                        <p class="chart-placeholder">No outgoing transactions in the selected timeframe.</p>
                        {% endif %}
                    </div>
                    <div class="pie-chart">
                        <h3>Top Outgoing Tags</h3>
                        {% if top_outgoing_tags %}
                        <canvas id="top-outgoing-tags-chart"></canvas>
                        {% else %}
                        <p class="chart-placeholder">No tagged outgoing activity in the selected timeframe.</p>
                        {% endif %}
                    </div>
                </div>
            </div>
        </div>
        <script>
            const balanceData = {{ balance_changes | tojson }};
            const txDayData = {{ transactions_by_day | tojson }};
            const topIncoming = {{ top_incoming | tojson }};
            const topOutgoing = {{ top_outgoing | tojson }};
            const topIncomingTags = {{ top_incoming_tags | tojson }};
            const topOutgoingTags = {{ top_outgoing_tags | tojson }};

            const formatUSD = (value) => {
                if (!Number.isFinite(value)) {
                    return "$0.00";
                }
                return `$${value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;
            };

            const hashString = (value) => {
                const str = String(value ?? "");
                let hash = 0;
                for (let i = 0; i < str.length; i++) {
                    hash = (hash << 5) - hash + str.charCodeAt(i);
                    hash |= 0; // Convert to 32bit integer
                }
                return hash;
            };

            const colorFromIdentifier = (identifier, fallbackIndex) => {
                const key = identifier ?? `fallback-${fallbackIndex}`;
                const hash = Math.abs(hashString(String(key)));
                const hue = (hash * 137.508) % 360;
                const saturation = 55 + (hash % 30); // 55% - 84%
                const lightness = 42 + ((hash >> 3) % 28); // 42% - 69%
                const hoverLightness = Math.min(92, lightness + 12);
                const hoverSaturation = Math.min(90, saturation + 6);

                return {
                    base: `hsl(${hue.toFixed(1)}, ${saturation}%, ${lightness}%)`,
                    hover: `hsl(${hue.toFixed(1)}, ${hoverSaturation}%, ${hoverLightness}%)`,
                };
            };

            const buildPalette = (items, keyBuilder) => {
                const bases = [];
                const hovers = [];
                items.forEach((item, index) => {
                    const identifier = keyBuilder(item, index);
                    const { base, hover } = colorFromIdentifier(identifier, index);
                    bases.push(base);
                    hovers.push(hover);
                });
                return { bases, hovers };
            };

            const buildEntityColors = (items) => buildPalette(
                items,
                (item, index) => item.entity_id ?? `entity-${index}`,
            );

            const buildTagColors = (items) => buildPalette(
                items,
                (item, index) => `tag-${item.tag_id ?? index}`,
            );

            const buildDoughnutOptions = (dataValues) => {
                const total = dataValues.reduce((sum, current) => sum + current, 0) || 1;
                return {
                    cutout: '55%',
                    plugins: {
                        legend: {
                            position: 'bottom',
                        },
                        tooltip: {
                            callbacks: {
                                label: (context) => {
                                    const value = context.parsed;
                                    const percentage = ((value / total) * 100).toFixed(1);
                                    return `${context.label}: ${formatUSD(value)} (${percentage}%)`;
                                },
                            },
                        },
                    },
                };
            };

            const buildDoughnutDataset = (values, colors, hoverColors) => ({
                data: values,
                backgroundColor: colors,
                borderColor: '#f8fafc',
                borderWidth: 2,
                spacing: 2,
                hoverOffset: 10,
                hoverBackgroundColor: hoverColors ?? colors,
            });

            const balanceDatasets = {};
            balanceData.forEach(item => {
                for (const curr in item.balance_changes) {
                    if (!balanceDatasets[curr]) {
                        balanceDatasets[curr] = {
                            label: curr.toUpperCase(),
                            data: [],
                            borderWidth: 2,
                            tension: 0.1
                        };
                    }
                }
            });

            balanceData.forEach(item => {
                const day = item.day;
                for (const curr in item.balance_changes) {
                    const value = item.balance_changes[curr];
                    balanceDatasets[curr].data.push({ x: day, y: value });
                }
            });

            const balanceChartConfig = {
                type: 'line',
                data: {
                    datasets: Object.values(balanceDatasets)
                },
                options: {
                    parsing: { xAxisKey: 'x', yAxisKey: 'y' },
                    interaction: { intersect: false, mode: 'nearest' },
                    scales: {
                        x: {
                            type: 'time',
                            time: { parser: 'yyyy-MM-dd', unit: 'day', tooltipFormat: 'PP' }
                        },
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            };

            const txPoints = txDayData.map(item => ({ x: item.day, y: item.transaction_count }));
            const txChartConfig = {
                type: 'bar',
                data: {
                    datasets: [
                        {
                            label: 'Transactions',
                            data: txPoints,
                            borderWidth: 2
                        }
                    ]
                },
                options: {
                    parsing: { xAxisKey: 'x', yAxisKey: 'y' },
                    scales: {
                        x: {
                            type: 'time',
                            time: { parser: 'yyyy-MM-dd', unit: 'day', tooltipFormat: 'PP' }
                        },
                        y: {
                            beginAtZero: true,
                            precision: 0
                        }
                    }
                }
            };

            new Chart(document.getElementById('balance-change-chart'), balanceChartConfig);
            new Chart(document.getElementById('transactions-day-chart'), txChartConfig);

            if (topIncoming.length) {
                const incomeLabels = topIncoming.map(item => item.entity_name || `Entity #${item.entity_id}`);
                const incomeValues = topIncoming.map(item => item.total_usd);
                const incomeColors = buildEntityColors(topIncoming);

                new Chart(
                    document.getElementById('top-incoming-chart'),
                    {
                        type: 'doughnut',
                        data: {
                            labels: incomeLabels,
                            datasets: [
                                buildDoughnutDataset(
                                    incomeValues,
                                    incomeColors.bases,
                                    incomeColors.hovers,
                                ),
                            ],
                        },
                        options: buildDoughnutOptions(incomeValues),
                    }
                );
            }

            if (topOutgoing.length) {
                const expenseLabels = topOutgoing.map(item => item.entity_name || `Entity #${item.entity_id}`);
                const expenseValues = topOutgoing.map(item => item.total_usd);
                const expenseColors = buildEntityColors(topOutgoing);

                new Chart(
                    document.getElementById('top-outgoing-chart'),
                    {
                        type: 'doughnut',
                        data: {
                            labels: expenseLabels,
                            datasets: [
                                buildDoughnutDataset(
                                    expenseValues,
                                    expenseColors.bases,
                                    expenseColors.hovers,
                                ),
                            ],
                        },
                        options: buildDoughnutOptions(expenseValues),
                    }
                );
            }

            if (topIncomingTags.length) {
                const incomingTagLabels = topIncomingTags.map(item => item.tag_name || `Tag #${item.tag_id}`);
                const incomingTagValues = topIncomingTags.map(item => item.total_usd);
                const incomingTagColors = buildTagColors(topIncomingTags);

                new Chart(
                    document.getElementById('top-incoming-tags-chart'),
                    {
                        type: 'doughnut',
                        data: {
                            labels: incomingTagLabels,
                            datasets: [
                                buildDoughnutDataset(
                                    incomingTagValues,
                                    incomingTagColors.bases,
                                    incomingTagColors.hovers,
                                ),
                            ],
                        },
                        options: buildDoughnutOptions(incomingTagValues),
                    }
                );
            }

            if (topOutgoingTags.length) {
                const outgoingTagLabels = topOutgoingTags.map(item => item.tag_name || `Tag #${item.tag_id}`);
                const outgoingTagValues = topOutgoingTags.map(item => item.total_usd);
                const outgoingTagColors = buildTagColors(topOutgoingTags);

                new Chart(
                    document.getElementById('top-outgoing-tags-chart'),
                    {
                        type: 'doughnut',
                        data: {
                            labels: outgoingTagLabels,
                            datasets: [
                                buildDoughnutDataset(
                                    outgoingTagValues,
                                    outgoingTagColors.bases,
                                    outgoingTagColors.hovers,
                                ),
                            ],
                        },
                        options: buildDoughnutOptions(outgoingTagValues),
                    }
                );
            }
        </script>
    </div>
</div>
<div class="transactions-section">
    <h2>Transactions</h2>
    {{ transaction_list(transactions) }}
    {{ pagination_control(page, total, limit) }}
</div>
{% endblock %}